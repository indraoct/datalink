<?php

class DeliveryOrderModel {

	protected $_table = 't_delivery_order';
	protected $_tableDetail = 't_delivery_order_detail';
	protected $_bomTable = 't_project_bom';
	protected $_detailBom = 't_project_bom_detail';
	protected $_id = 'id_trx';

	public function getData($filter, $limit, $offset, $sortBy, $sortDir)
	{
		$data['id'] = $this->_id;
	
		$tableColumn = array($this->_id, 'a.trx_no','a.trx_date','p.project_name','c.customer_name');
		
		$query = DB::table($this->_table.' as a')
						->select($tableColumn)
						->leftJoin('m_customer AS c', 'a.id_customer', '=', 'c.id_customer')
						->leftJoin('m_project AS p', 'a.id_project', '=', 'p.id_project')
						->where('a.is_deleted',0)
						->where('a.owner', Crypt::decrypt(Session::get('owner')));
		$data['count'] = $data['filter_count'] = $query->count();
		
		if($filter)
		{
			if($filter['trx_no'])
				$query->where('a.trx_no', 'LIKE', '%'.$filter['trx_no'].'%');
            if ($filter['tanggal_dari'])
                $query->where('a.trx_date', '>=', defaultDate($filter['tanggal_dari']));
            if ($filter['tanggal_hingga'])
                $query->where('a.trx_date', '<=', defaultDate($filter['tanggal_hingga']));
			if($filter['id_project'])
				$query->where('a.id_project', 'LIKE', '%'.$filter['id_project'].'%');
			if($filter['id_customer'])
				$query->where('a.id_customer', 'LIKE', '%'.$filter['id_customer'].'%');
				
			$data['filter_count'] = $query->count();
		}
		if($limit == 0)
			$data['data'] = $query->orderBy($tableColumn[$sortBy],$sortDir)->get();
		else
			$data['data'] = $query->orderBy($tableColumn[$sortBy],$sortDir)->skip($offset)->take($limit)->get();

		return $data;
	}

	public function getBOM($idBom)
	{
		$data['master'] = DB::table($this->_bomTable.' as a')
										->select('a.id_bom','a.bom_no','a.id_project','p.project_name','a.id_customer','c.customer_name')
										->leftJoin('m_customer AS c', 'a.id_customer', '=', 'c.id_customer')
										->leftJoin('m_project AS p', 'a.id_project', '=', 'p.id_project')
										->where('a.id_bom',$idBom)
										->where('a.is_deleted',0)
										->where('a.owner', Crypt::decrypt(Session::get('owner')))
										->first();
		if(!empty($data['master']))
		$data['detail'] = DB::table($this->_detailBom.' as a')
												->where('a.id_bom',$idBom)
												->get();
		return $data;
	}

	public function insertData($data)
	{
		try
		{
			DB::beginTransaction();
			$insertArr = array(
				// 'id_trx'			=> $data['id_trx'],
				'trx_no'		=> $data['trx_no'],
				'trx_date'		=> defaultDate($data['trx_date']),
				'id_customer'	=> $data['id_customer'],
				'id_project'	=> $data['id_project'],
				'id_bom'			=> $data['idBom'],
				'no_ref'		=> $data['no_ref'],
				'note'			=> $data['note'],
				'owner' 		=> Crypt::decrypt(Session::get('owner')),
				'created_by' => Session::get('user_name'),
				'created_at'	=> DB::raw('now()'),
				'is_deleted'	=> 0,
			);
			$idMaster = DB::table($this->_table)->insertGetId($insertArr);
			self::insertDetail($data['item'],$idMaster);

			//INSERT TRX
			
			 $paramStokAkun = array(
				'owner' 		=> Crypt::decrypt(Session::get('owner')),
				'trx_code'	=> 'DO',
				'trx_date'		=> defaultDate($data['trx_date']),
				'id_ref'			=> $data['trx_no'], // increment
				'no_ref'		=> $data['no_ref'], // 14001o
				'notes' 		=> 'Delivery Order',
				'created_at'	=> DB::raw('now()')
			);
			
			$paramStokDetail = array();
			foreach($data['item'] as $row)
			{				
				$paramStokDetail[] = array(
					'id_warehouse'		=> '',//$row['id_warehouse'],
					'id_item'					=> $row['id_item'],
					'stock_out'					=> defaultNumeric($row['qty']),
				);
			}
			$stok = new Stock(Crypt::decrypt(Session::get('owner')));
			$stok->createTrx($paramStokAkun,$paramStokDetail);
			// END INSERT TRX

		   DB::commit();
		}catch(Exception $e)
		{
			DB::rollback();
			var_dump($e->getMessage());die;
			return $e->getMessage();
		}

		return $idMaster;
	}

	public function insertDetail($data,$id)
	{
		if(is_array($data))
		{
			foreach($data as $key=>$row)
			{
				$insertArr = array(
					// 'id_detail'			=> $data['id_detail'],
					'id_bom_detail'	=> $row['id_detail'],
					'id_trx'				=> $id,
					'id_warehouse'=> '',//$row['id_warehouse'],
					'item_name'	=> $row['item_name'],
					'id_item'			=> $row['id_item'],
					// 'item_code'		=> $data['item_code'],
					// 'qty_open'		=> ($row['qty']),
					'qty_received'	=> defaultNumeric($row['qty']),
					// 'unit'					=> $row['unit'],
				);
				DB::table($this->_tableDetail)->insertGetId($insertArr);
			}
		}
	}
	
	public function getDO($idDO)
	{
		$data['master'] = DB::table($this->_table.' AS a')
													->select('a.trx_no','a.trx_date','a.id_project','p.project_name','a.id_customer','c.customer_name','a.note','a.no_ref')
													->leftJoin('m_customer AS c', 'a.id_customer', '=', 'c.id_customer')
													->leftJoin('m_project AS p', 'a.id_project', '=', 'p.id_project')
													->where('a.is_deleted',0)
													->where('a.owner', Crypt::decrypt(Session::get('owner')))
													->where('a.'.$this->_id, $idDO)
													->first();
		$data['detail'] 		= DB::table($this->_tableDetail.' AS a')
													->where('a.'.$this->_id, $idDO)
													->get();
		$data['master'] 	= (array) $data['master'];
		$data['detail'] 		= (array) $data['detail'];
		return $data;
	}
	
	
}
