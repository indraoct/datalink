<?php 

class ProjectCategoryController extends BaseController 
{
	protected $_defaultModel = 'ProjectCategoryModel';
	protected $_pageTitle = 'Project Category';
	protected $_menuId = 'project_category';
    
	public function __construct()
	{
        
    }
    
    public function index()
	{
		$param = array(
							'title'			=> $this->_pageTitle,
							'title_desc'	=> 'Project Category',
							'menu_id'		=> $this->_menuId,
						);
        return View::make('modules.project_category.index',$param);
    }

	public function getData()
	{
		if(Request::ajax()){
		
			$privi['edit'] = hasPrivilege($this->_menuId,'edit');
			$privi['delete'] = hasPrivilege($this->_menuId,'delete');
		
			$param = Input::all();
			
			$iDisplayLength = intval($param['length']);
			$limit = $iDisplayLength < 0 ? $iTotalRecords : $iDisplayLength; 
			$offset = intval($param['start']);
			$draw = intval($param['draw']);
			$sortBy = $param['order'][0]['column'];
			$sortDir = $param['order'][0]['dir'];
			$filter = isset($param['filter']) ? $param['filter'] : array();
			
			$model = new $this->_defaultModel;
			$get = $model->getData($filter, $limit, $offset, $sortBy, $sortDir);
			
			$data = array();
			$n = $offset + 1;
			foreach($get['data'] as $key=>$r)
			{
				$row = $r;
				
				$row->id = $r->$get['id'];
				unset($row->$get['id']);
				
				$ubah = $hapus = '';
				if($privi['edit']) 
					$ubah = '<a href="javascript:;" class="btn btn-xs purple tooltips show_edit" data-original-title="Edit" ><i class="fa fa-pencil"></i></a> ';
				if($privi['delete'])
					$hapus = '<a href="javascript:;" class="btn btn-xs red tooltips do_delete" data-original-title="Hapus"><i class="fa fa-trash-o"></i></a> ';
				
				$row->action = '<div>'.$ubah.$hapus.'</div>';
				$row->no = $n;
				
				$data[$key] = $row;
				
				$n++;
			}
			
			$records["data"] = $get['data'];
			$records["draw"] = $draw;
			$records["recordsTotal"] = $get['count'];
			$records["recordsFiltered"] = $get['filter_count'];;
			
			echo json_encode($records);
		
		}
	}
    
    public function doAdd()
	{
        $input = Input::all();
                
        $rules = array('category_name' => 'required');
        
        $validator = Validator::make($input, $rules);
        
        if($validator->fails())
		{    
			$errorArr = array();
			foreach($rules as $key=>$row)
			{
				$errorArr[$key] = $validator->messages()->first($key);
			}
			
			$ret = array(
						'status'		=> false,
						'alert_msg'	=> 'Terdapat error. Mohon dicek kembali.',
						'error_msg'	=> $errorArr
					);
        }    
        else
		{                                    
			$model = new $this->_defaultModel;
			$id = $model->insertData($input);
		  
			if($id)
			{
				$ret = array(
							'status'		=> true,
							'alert_msg'	=> 'Successfully added.',
							'error_msg'	=> array(),
							'id'				=> $id
						);
			}
			else
			{
				$ret = array(
							'status'		=> false,
							'alert_msg'	=> 'Kategori gagal ditambah. Silakan hubungi Customer Support.',
							'error_msg'	=> array()
						);
			}
        }//end of validator
		
		echo json_encode($ret);
    }
    
    public function doDelete()
	{
        $id = intval(Input::get('id'));
		$model = new $this->_defaultModel;
		if($model->hasProject($id))
		{
			$ret = array(
						'status'		=> false,
						'alert_msg'	=> 'Kategori yang dipilih memiliki project, tidak dapat dihapus.',
						'error_msg'	=> array()
					);
		}
		else
		{
			$del = $model->deleteData($id);
			$ret = array(
						'status'		=> $del,
						'alert_msg'	=> $del ? 'Successfully deleted.' : 'Data gagal dihapus. Silakan hubungi Customer Support.',
						'error_msg'	=> array()
					);
		}
		echo json_encode($ret);
	}
    
}